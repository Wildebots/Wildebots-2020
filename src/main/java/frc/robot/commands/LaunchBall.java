// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;

/**
 *
 */
public class LaunchBall extends Command {
    
    private double speed; //speed of launcher
    private int inputType; //button A,B,X,Y or a trigger

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public LaunchBall() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.ballLauncher);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    public LaunchBall(int _inputType) {
        inputType = _inputType;

        if(inputType == 1) //if button A (controller 1) speed...
            speed = 0.25;

        else if(inputType == 2) //if button B (controller 1) speed....
            speed = 0.5;
        
        else if(inputType == 3) //if button X (controller 1) speed...
            speed = 0.75;

        else if(inputType == 4) //if button Y (controller 1) speed...
            speed = 1.00;
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.ballLauncher.LaunchSpeed(0.0);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        if(inputType == 5) {
            Robot.ballLauncher.LaunchSpeed(speed);
        }
        else {
            end();
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.ballLauncher.endLaunch();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
